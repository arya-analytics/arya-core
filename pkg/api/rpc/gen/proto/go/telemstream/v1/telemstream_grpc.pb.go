// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package telemstreamv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TelemStreamServiceClient is the client API for TelemStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelemStreamServiceClient interface {
	Create(ctx context.Context, opts ...grpc.CallOption) (TelemStreamService_CreateClient, error)
	Retrieve(ctx context.Context, opts ...grpc.CallOption) (TelemStreamService_RetrieveClient, error)
}

type telemStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemStreamServiceClient(cc grpc.ClientConnInterface) TelemStreamServiceClient {
	return &telemStreamServiceClient{cc}
}

func (c *telemStreamServiceClient) Create(ctx context.Context, opts ...grpc.CallOption) (TelemStreamService_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemStreamService_ServiceDesc.Streams[0], "/telemstream.v1.TelemStreamService/Create", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemStreamServiceCreateClient{stream}
	return x, nil
}

type TelemStreamService_CreateClient interface {
	Send(*CreateRequest) error
	Recv() (*CreateResponse, error)
	grpc.ClientStream
}

type telemStreamServiceCreateClient struct {
	grpc.ClientStream
}

func (x *telemStreamServiceCreateClient) Send(m *CreateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *telemStreamServiceCreateClient) Recv() (*CreateResponse, error) {
	m := new(CreateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemStreamServiceClient) Retrieve(ctx context.Context, opts ...grpc.CallOption) (TelemStreamService_RetrieveClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemStreamService_ServiceDesc.Streams[1], "/telemstream.v1.TelemStreamService/Retrieve", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemStreamServiceRetrieveClient{stream}
	return x, nil
}

type TelemStreamService_RetrieveClient interface {
	Send(*RetrieveRequest) error
	Recv() (*RetrieveResponse, error)
	grpc.ClientStream
}

type telemStreamServiceRetrieveClient struct {
	grpc.ClientStream
}

func (x *telemStreamServiceRetrieveClient) Send(m *RetrieveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *telemStreamServiceRetrieveClient) Recv() (*RetrieveResponse, error) {
	m := new(RetrieveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TelemStreamServiceServer is the server API for TelemStreamService service.
// All implementations should embed UnimplementedTelemStreamServiceServer
// for forward compatibility
type TelemStreamServiceServer interface {
	Create(TelemStreamService_CreateServer) error
	Retrieve(TelemStreamService_RetrieveServer) error
}

// UnimplementedTelemStreamServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTelemStreamServiceServer struct {
}

func (UnimplementedTelemStreamServiceServer) Create(TelemStreamService_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTelemStreamServiceServer) Retrieve(TelemStreamService_RetrieveServer) error {
	return status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}

// UnsafeTelemStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemStreamServiceServer will
// result in compilation errors.
type UnsafeTelemStreamServiceServer interface {
	mustEmbedUnimplementedTelemStreamServiceServer()
}

func RegisterTelemStreamServiceServer(s grpc.ServiceRegistrar, srv TelemStreamServiceServer) {
	s.RegisterService(&TelemStreamService_ServiceDesc, srv)
}

func _TelemStreamService_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TelemStreamServiceServer).Create(&telemStreamServiceCreateServer{stream})
}

type TelemStreamService_CreateServer interface {
	Send(*CreateResponse) error
	Recv() (*CreateRequest, error)
	grpc.ServerStream
}

type telemStreamServiceCreateServer struct {
	grpc.ServerStream
}

func (x *telemStreamServiceCreateServer) Send(m *CreateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *telemStreamServiceCreateServer) Recv() (*CreateRequest, error) {
	m := new(CreateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TelemStreamService_Retrieve_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TelemStreamServiceServer).Retrieve(&telemStreamServiceRetrieveServer{stream})
}

type TelemStreamService_RetrieveServer interface {
	Send(*RetrieveResponse) error
	Recv() (*RetrieveRequest, error)
	grpc.ServerStream
}

type telemStreamServiceRetrieveServer struct {
	grpc.ServerStream
}

func (x *telemStreamServiceRetrieveServer) Send(m *RetrieveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *telemStreamServiceRetrieveServer) Recv() (*RetrieveRequest, error) {
	m := new(RetrieveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TelemStreamService_ServiceDesc is the grpc.ServiceDesc for TelemStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelemStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telemstream.v1.TelemStreamService",
	HandlerType: (*TelemStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Create",
			Handler:       _TelemStreamService_Create_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Retrieve",
			Handler:       _TelemStreamService_Retrieve_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "telemstream/v1/telemstream.proto",
}
