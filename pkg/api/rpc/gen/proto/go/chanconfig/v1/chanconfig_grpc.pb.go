// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chanconfigv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChanConfigServiceClient is the client API for ChanConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChanConfigServiceClient interface {
	CreateConfig(ctx context.Context, in *CreateConfigRequest, opts ...grpc.CallOption) (*CreateConfigResponse, error)
	RetrieveConfig(ctx context.Context, in *RetrieveConfigRequest, opts ...grpc.CallOption) (*RetrieveConfigResponse, error)
}

type chanConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChanConfigServiceClient(cc grpc.ClientConnInterface) ChanConfigServiceClient {
	return &chanConfigServiceClient{cc}
}

func (c *chanConfigServiceClient) CreateConfig(ctx context.Context, in *CreateConfigRequest, opts ...grpc.CallOption) (*CreateConfigResponse, error) {
	out := new(CreateConfigResponse)
	err := c.cc.Invoke(ctx, "/chanconfig.v1.ChanConfigService/CreateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chanConfigServiceClient) RetrieveConfig(ctx context.Context, in *RetrieveConfigRequest, opts ...grpc.CallOption) (*RetrieveConfigResponse, error) {
	out := new(RetrieveConfigResponse)
	err := c.cc.Invoke(ctx, "/chanconfig.v1.ChanConfigService/RetrieveConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChanConfigServiceServer is the server API for ChanConfigService service.
// All implementations should embed UnimplementedChanConfigServiceServer
// for forward compatibility
type ChanConfigServiceServer interface {
	CreateConfig(context.Context, *CreateConfigRequest) (*CreateConfigResponse, error)
	RetrieveConfig(context.Context, *RetrieveConfigRequest) (*RetrieveConfigResponse, error)
}

// UnimplementedChanConfigServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChanConfigServiceServer struct {
}

func (UnimplementedChanConfigServiceServer) CreateConfig(context.Context, *CreateConfigRequest) (*CreateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfig not implemented")
}
func (UnimplementedChanConfigServiceServer) RetrieveConfig(context.Context, *RetrieveConfigRequest) (*RetrieveConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveConfig not implemented")
}

// UnsafeChanConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChanConfigServiceServer will
// result in compilation errors.
type UnsafeChanConfigServiceServer interface {
	mustEmbedUnimplementedChanConfigServiceServer()
}

func RegisterChanConfigServiceServer(s grpc.ServiceRegistrar, srv ChanConfigServiceServer) {
	s.RegisterService(&ChanConfigService_ServiceDesc, srv)
}

func _ChanConfigService_CreateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChanConfigServiceServer).CreateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chanconfig.v1.ChanConfigService/CreateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChanConfigServiceServer).CreateConfig(ctx, req.(*CreateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChanConfigService_RetrieveConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChanConfigServiceServer).RetrieveConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chanconfig.v1.ChanConfigService/RetrieveConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChanConfigServiceServer).RetrieveConfig(ctx, req.(*RetrieveConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChanConfigService_ServiceDesc is the grpc.ServiceDesc for ChanConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChanConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chanconfig.v1.ChanConfigService",
	HandlerType: (*ChanConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConfig",
			Handler:    _ChanConfigService_CreateConfig_Handler,
		},
		{
			MethodName: "RetrieveConfig",
			Handler:    _ChanConfigService_RetrieveConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chanconfig/v1/chanconfig.proto",
}
