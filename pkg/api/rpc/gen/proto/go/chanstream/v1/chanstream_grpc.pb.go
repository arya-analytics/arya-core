// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chanstreamv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChanStreamServiceClient is the client API for ChanStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChanStreamServiceClient interface {
	Create(ctx context.Context, opts ...grpc.CallOption) (ChanStreamService_CreateClient, error)
	Retrieve(ctx context.Context, opts ...grpc.CallOption) (ChanStreamService_RetrieveClient, error)
}

type chanStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChanStreamServiceClient(cc grpc.ClientConnInterface) ChanStreamServiceClient {
	return &chanStreamServiceClient{cc}
}

func (c *chanStreamServiceClient) Create(ctx context.Context, opts ...grpc.CallOption) (ChanStreamService_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChanStreamService_ServiceDesc.Streams[0], "/chanstream.v1.ChanStreamService/Create", opts...)
	if err != nil {
		return nil, err
	}
	x := &chanStreamServiceCreateClient{stream}
	return x, nil
}

type ChanStreamService_CreateClient interface {
	Send(*CreateRequest) error
	Recv() (*CreateResponse, error)
	grpc.ClientStream
}

type chanStreamServiceCreateClient struct {
	grpc.ClientStream
}

func (x *chanStreamServiceCreateClient) Send(m *CreateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chanStreamServiceCreateClient) Recv() (*CreateResponse, error) {
	m := new(CreateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chanStreamServiceClient) Retrieve(ctx context.Context, opts ...grpc.CallOption) (ChanStreamService_RetrieveClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChanStreamService_ServiceDesc.Streams[1], "/chanstream.v1.ChanStreamService/Retrieve", opts...)
	if err != nil {
		return nil, err
	}
	x := &chanStreamServiceRetrieveClient{stream}
	return x, nil
}

type ChanStreamService_RetrieveClient interface {
	Send(*RetrieveRequest) error
	Recv() (*RetrieveResponse, error)
	grpc.ClientStream
}

type chanStreamServiceRetrieveClient struct {
	grpc.ClientStream
}

func (x *chanStreamServiceRetrieveClient) Send(m *RetrieveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chanStreamServiceRetrieveClient) Recv() (*RetrieveResponse, error) {
	m := new(RetrieveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChanStreamServiceServer is the server API for ChanStreamService service.
// All implementations should embed UnimplementedChanStreamServiceServer
// for forward compatibility
type ChanStreamServiceServer interface {
	Create(ChanStreamService_CreateServer) error
	Retrieve(ChanStreamService_RetrieveServer) error
}

// UnimplementedChanStreamServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChanStreamServiceServer struct {
}

func (UnimplementedChanStreamServiceServer) Create(ChanStreamService_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedChanStreamServiceServer) Retrieve(ChanStreamService_RetrieveServer) error {
	return status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}

// UnsafeChanStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChanStreamServiceServer will
// result in compilation errors.
type UnsafeChanStreamServiceServer interface {
	mustEmbedUnimplementedChanStreamServiceServer()
}

func RegisterChanStreamServiceServer(s grpc.ServiceRegistrar, srv ChanStreamServiceServer) {
	s.RegisterService(&ChanStreamService_ServiceDesc, srv)
}

func _ChanStreamService_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChanStreamServiceServer).Create(&chanStreamServiceCreateServer{stream})
}

type ChanStreamService_CreateServer interface {
	Send(*CreateResponse) error
	Recv() (*CreateRequest, error)
	grpc.ServerStream
}

type chanStreamServiceCreateServer struct {
	grpc.ServerStream
}

func (x *chanStreamServiceCreateServer) Send(m *CreateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chanStreamServiceCreateServer) Recv() (*CreateRequest, error) {
	m := new(CreateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChanStreamService_Retrieve_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChanStreamServiceServer).Retrieve(&chanStreamServiceRetrieveServer{stream})
}

type ChanStreamService_RetrieveServer interface {
	Send(*RetrieveResponse) error
	Recv() (*RetrieveRequest, error)
	grpc.ServerStream
}

type chanStreamServiceRetrieveServer struct {
	grpc.ServerStream
}

func (x *chanStreamServiceRetrieveServer) Send(m *RetrieveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chanStreamServiceRetrieveServer) Recv() (*RetrieveRequest, error) {
	m := new(RetrieveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChanStreamService_ServiceDesc is the grpc.ServiceDesc for ChanStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChanStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chanstream.v1.ChanStreamService",
	HandlerType: (*ChanStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Create",
			Handler:       _ChanStreamService_Create_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Retrieve",
			Handler:       _ChanStreamService_Retrieve_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chanstream/v1/chanstream.proto",
}
