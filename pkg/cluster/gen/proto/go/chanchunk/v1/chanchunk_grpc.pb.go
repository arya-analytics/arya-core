// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chanchunkv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChannelChunkServiceClient is the client API for ChannelChunkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelChunkServiceClient interface {
	Create(ctx context.Context, opts ...grpc.CallOption) (ChannelChunkService_CreateClient, error)
	Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (ChannelChunkService_RetrieveClient, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteREsponse, error)
}

type channelChunkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelChunkServiceClient(cc grpc.ClientConnInterface) ChannelChunkServiceClient {
	return &channelChunkServiceClient{cc}
}

func (c *channelChunkServiceClient) Create(ctx context.Context, opts ...grpc.CallOption) (ChannelChunkService_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChannelChunkService_ServiceDesc.Streams[0], "/chanchunk.v1.ChannelChunkService/Create", opts...)
	if err != nil {
		return nil, err
	}
	x := &channelChunkServiceCreateClient{stream}
	return x, nil
}

type ChannelChunkService_CreateClient interface {
	Send(*CreateRequest) error
	CloseAndRecv() (*CreateResponse, error)
	grpc.ClientStream
}

type channelChunkServiceCreateClient struct {
	grpc.ClientStream
}

func (x *channelChunkServiceCreateClient) Send(m *CreateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *channelChunkServiceCreateClient) CloseAndRecv() (*CreateResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *channelChunkServiceClient) Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (ChannelChunkService_RetrieveClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChannelChunkService_ServiceDesc.Streams[1], "/chanchunk.v1.ChannelChunkService/Retrieve", opts...)
	if err != nil {
		return nil, err
	}
	x := &channelChunkServiceRetrieveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChannelChunkService_RetrieveClient interface {
	Recv() (*RetrieveResponse, error)
	grpc.ClientStream
}

type channelChunkServiceRetrieveClient struct {
	grpc.ClientStream
}

func (x *channelChunkServiceRetrieveClient) Recv() (*RetrieveResponse, error) {
	m := new(RetrieveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *channelChunkServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteREsponse, error) {
	out := new(DeleteREsponse)
	err := c.cc.Invoke(ctx, "/chanchunk.v1.ChannelChunkService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelChunkServiceServer is the server API for ChannelChunkService service.
// All implementations should embed UnimplementedChannelChunkServiceServer
// for forward compatibility
type ChannelChunkServiceServer interface {
	Create(ChannelChunkService_CreateServer) error
	Retrieve(*RetrieveRequest, ChannelChunkService_RetrieveServer) error
	Delete(context.Context, *DeleteRequest) (*DeleteREsponse, error)
}

// UnimplementedChannelChunkServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChannelChunkServiceServer struct {
}

func (UnimplementedChannelChunkServiceServer) Create(ChannelChunkService_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedChannelChunkServiceServer) Retrieve(*RetrieveRequest, ChannelChunkService_RetrieveServer) error {
	return status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedChannelChunkServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteREsponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeChannelChunkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelChunkServiceServer will
// result in compilation errors.
type UnsafeChannelChunkServiceServer interface {
	mustEmbedUnimplementedChannelChunkServiceServer()
}

func RegisterChannelChunkServiceServer(s grpc.ServiceRegistrar, srv ChannelChunkServiceServer) {
	s.RegisterService(&ChannelChunkService_ServiceDesc, srv)
}

func _ChannelChunkService_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChannelChunkServiceServer).Create(&channelChunkServiceCreateServer{stream})
}

type ChannelChunkService_CreateServer interface {
	SendAndClose(*CreateResponse) error
	Recv() (*CreateRequest, error)
	grpc.ServerStream
}

type channelChunkServiceCreateServer struct {
	grpc.ServerStream
}

func (x *channelChunkServiceCreateServer) SendAndClose(m *CreateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *channelChunkServiceCreateServer) Recv() (*CreateRequest, error) {
	m := new(CreateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChannelChunkService_Retrieve_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RetrieveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChannelChunkServiceServer).Retrieve(m, &channelChunkServiceRetrieveServer{stream})
}

type ChannelChunkService_RetrieveServer interface {
	Send(*RetrieveResponse) error
	grpc.ServerStream
}

type channelChunkServiceRetrieveServer struct {
	grpc.ServerStream
}

func (x *channelChunkServiceRetrieveServer) Send(m *RetrieveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChannelChunkService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelChunkServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chanchunk.v1.ChannelChunkService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelChunkServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChannelChunkService_ServiceDesc is the grpc.ServiceDesc for ChannelChunkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChannelChunkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chanchunk.v1.ChannelChunkService",
	HandlerType: (*ChannelChunkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _ChannelChunkService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Create",
			Handler:       _ChannelChunkService_Create_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Retrieve",
			Handler:       _ChannelChunkService_Retrieve_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chanchunk/v1/chanchunk.proto",
}
