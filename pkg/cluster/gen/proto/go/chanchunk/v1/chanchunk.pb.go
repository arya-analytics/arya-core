// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: chanchunk/v1/chanchunk.proto

package chanchunkv1

import (
	_ "github.com/srikrsna/protoc-gen-gotag/tagger"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChannelChunkReplica struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty" model:"role:pk"`
	ChannelChunkID string `protobuf:"bytes,2,opt,name=ChannelChunkID,proto3" json:"ChannelChunkID,omitempty"`
	RangeReplicaID string `protobuf:"bytes,3,opt,name=RangeReplicaID,proto3" json:"RangeReplicaID,omitempty"`
	Telem          []byte `protobuf:"bytes,4,opt,name=telem,proto3" json:"telem,omitempty" model:"role:telemChunkData"`
}

func (x *ChannelChunkReplica) Reset() {
	*x = ChannelChunkReplica{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chanchunk_v1_chanchunk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelChunkReplica) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelChunkReplica) ProtoMessage() {}

func (x *ChannelChunkReplica) ProtoReflect() protoreflect.Message {
	mi := &file_chanchunk_v1_chanchunk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelChunkReplica.ProtoReflect.Descriptor instead.
func (*ChannelChunkReplica) Descriptor() ([]byte, []int) {
	return file_chanchunk_v1_chanchunk_proto_rawDescGZIP(), []int{0}
}

func (x *ChannelChunkReplica) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ChannelChunkReplica) GetChannelChunkID() string {
	if x != nil {
		return x.ChannelChunkID
	}
	return ""
}

func (x *ChannelChunkReplica) GetRangeReplicaID() string {
	if x != nil {
		return x.RangeReplicaID
	}
	return ""
}

func (x *ChannelChunkReplica) GetTelem() []byte {
	if x != nil {
		return x.Telem
	}
	return nil
}

type CreateReplicasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CCR *ChannelChunkReplica `protobuf:"bytes,1,opt,name=CCR,proto3" json:"CCR,omitempty"`
}

func (x *CreateReplicasRequest) Reset() {
	*x = CreateReplicasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chanchunk_v1_chanchunk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReplicasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReplicasRequest) ProtoMessage() {}

func (x *CreateReplicasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chanchunk_v1_chanchunk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReplicasRequest.ProtoReflect.Descriptor instead.
func (*CreateReplicasRequest) Descriptor() ([]byte, []int) {
	return file_chanchunk_v1_chanchunk_proto_rawDescGZIP(), []int{1}
}

func (x *CreateReplicasRequest) GetCCR() *ChannelChunkReplica {
	if x != nil {
		return x.CCR
	}
	return nil
}

type CreateReplicasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateReplicasResponse) Reset() {
	*x = CreateReplicasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chanchunk_v1_chanchunk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReplicasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReplicasResponse) ProtoMessage() {}

func (x *CreateReplicasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chanchunk_v1_chanchunk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReplicasResponse.ProtoReflect.Descriptor instead.
func (*CreateReplicasResponse) Descriptor() ([]byte, []int) {
	return file_chanchunk_v1_chanchunk_proto_rawDescGZIP(), []int{2}
}

type RetrieveReplicasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CCR *ChannelChunkReplica `protobuf:"bytes,1,opt,name=CCR,proto3" json:"CCR,omitempty"`
}

func (x *RetrieveReplicasResponse) Reset() {
	*x = RetrieveReplicasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chanchunk_v1_chanchunk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveReplicasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveReplicasResponse) ProtoMessage() {}

func (x *RetrieveReplicasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chanchunk_v1_chanchunk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveReplicasResponse.ProtoReflect.Descriptor instead.
func (*RetrieveReplicasResponse) Descriptor() ([]byte, []int) {
	return file_chanchunk_v1_chanchunk_proto_rawDescGZIP(), []int{3}
}

func (x *RetrieveReplicasResponse) GetCCR() *ChannelChunkReplica {
	if x != nil {
		return x.CCR
	}
	return nil
}

type RetrieveReplicasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PKC []string `protobuf:"bytes,1,rep,name=PKC,proto3" json:"PKC,omitempty"`
}

func (x *RetrieveReplicasRequest) Reset() {
	*x = RetrieveReplicasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chanchunk_v1_chanchunk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveReplicasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveReplicasRequest) ProtoMessage() {}

func (x *RetrieveReplicasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chanchunk_v1_chanchunk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveReplicasRequest.ProtoReflect.Descriptor instead.
func (*RetrieveReplicasRequest) Descriptor() ([]byte, []int) {
	return file_chanchunk_v1_chanchunk_proto_rawDescGZIP(), []int{4}
}

func (x *RetrieveReplicasRequest) GetPKC() []string {
	if x != nil {
		return x.PKC
	}
	return nil
}

type DeleteReplicasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PKC []string `protobuf:"bytes,1,rep,name=PKC,proto3" json:"PKC,omitempty"`
}

func (x *DeleteReplicasRequest) Reset() {
	*x = DeleteReplicasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chanchunk_v1_chanchunk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReplicasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReplicasRequest) ProtoMessage() {}

func (x *DeleteReplicasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chanchunk_v1_chanchunk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReplicasRequest.ProtoReflect.Descriptor instead.
func (*DeleteReplicasRequest) Descriptor() ([]byte, []int) {
	return file_chanchunk_v1_chanchunk_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteReplicasRequest) GetPKC() []string {
	if x != nil {
		return x.PKC
	}
	return nil
}

type DeleteReplicasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteReplicasResponse) Reset() {
	*x = DeleteReplicasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chanchunk_v1_chanchunk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReplicasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReplicasResponse) ProtoMessage() {}

func (x *DeleteReplicasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chanchunk_v1_chanchunk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReplicasResponse.ProtoReflect.Descriptor instead.
func (*DeleteReplicasResponse) Descriptor() ([]byte, []int) {
	return file_chanchunk_v1_chanchunk_proto_rawDescGZIP(), []int{6}
}

var File_chanchunk_v1_chanchunk_proto protoreflect.FileDescriptor

var file_chanchunk_v1_chanchunk_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x63, 0x68, 0x61, 0x6e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x1a, 0x13, 0x74, 0x61,
	0x67, 0x67, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xc5, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x25, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x3a, 0x22, 0x72, 0x6f, 0x6c, 0x65, 0x3a, 0x70, 0x6b, 0x2c, 0x22, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x44,
	0x12, 0x37, 0x0a, 0x05, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x21, 0x9a, 0x84, 0x9e, 0x03, 0x1c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0x22, 0x72, 0x6f, 0x6c,
	0x65, 0x3a, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x2c, 0x22, 0x52, 0x05, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x22, 0x4c, 0x0a, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x43, 0x43, 0x52, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x52, 0x03, 0x43, 0x43, 0x52, 0x22, 0x18, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4f, 0x0a, 0x18, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x03, 0x43, 0x43, 0x52, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x03, 0x43,
	0x43, 0x52, 0x22, 0x2b, 0x0a, 0x17, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x50, 0x4b, 0x43, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x50, 0x4b, 0x43, 0x22,
	0x29, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x4b, 0x43, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x50, 0x4b, 0x43, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0xb6, 0x02, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x23,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x63, 0x0a, 0x10, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12,
	0x25, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x5b, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xca, 0x01,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e,
	0x76, 0x31, 0x42, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x72, 0x79, 0x61, 0x2d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f,
	0x61, 0x72, 0x79, 0x61, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x3b,
	0x63, 0x68, 0x61, 0x6e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x58,
	0x58, 0xaa, 0x02, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x43, 0x68, 0x61,
	0x6e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_chanchunk_v1_chanchunk_proto_rawDescOnce sync.Once
	file_chanchunk_v1_chanchunk_proto_rawDescData = file_chanchunk_v1_chanchunk_proto_rawDesc
)

func file_chanchunk_v1_chanchunk_proto_rawDescGZIP() []byte {
	file_chanchunk_v1_chanchunk_proto_rawDescOnce.Do(func() {
		file_chanchunk_v1_chanchunk_proto_rawDescData = protoimpl.X.CompressGZIP(file_chanchunk_v1_chanchunk_proto_rawDescData)
	})
	return file_chanchunk_v1_chanchunk_proto_rawDescData
}

var file_chanchunk_v1_chanchunk_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_chanchunk_v1_chanchunk_proto_goTypes = []interface{}{
	(*ChannelChunkReplica)(nil),      // 0: chanchunk.v1.ChannelChunkReplica
	(*CreateReplicasRequest)(nil),    // 1: chanchunk.v1.CreateReplicasRequest
	(*CreateReplicasResponse)(nil),   // 2: chanchunk.v1.CreateReplicasResponse
	(*RetrieveReplicasResponse)(nil), // 3: chanchunk.v1.RetrieveReplicasResponse
	(*RetrieveReplicasRequest)(nil),  // 4: chanchunk.v1.RetrieveReplicasRequest
	(*DeleteReplicasRequest)(nil),    // 5: chanchunk.v1.DeleteReplicasRequest
	(*DeleteReplicasResponse)(nil),   // 6: chanchunk.v1.DeleteReplicasResponse
}
var file_chanchunk_v1_chanchunk_proto_depIdxs = []int32{
	0, // 0: chanchunk.v1.CreateReplicasRequest.CCR:type_name -> chanchunk.v1.ChannelChunkReplica
	0, // 1: chanchunk.v1.RetrieveReplicasResponse.CCR:type_name -> chanchunk.v1.ChannelChunkReplica
	1, // 2: chanchunk.v1.ChannelChunkService.CreateReplicas:input_type -> chanchunk.v1.CreateReplicasRequest
	4, // 3: chanchunk.v1.ChannelChunkService.RetrieveReplicas:input_type -> chanchunk.v1.RetrieveReplicasRequest
	5, // 4: chanchunk.v1.ChannelChunkService.DeleteReplicas:input_type -> chanchunk.v1.DeleteReplicasRequest
	2, // 5: chanchunk.v1.ChannelChunkService.CreateReplicas:output_type -> chanchunk.v1.CreateReplicasResponse
	3, // 6: chanchunk.v1.ChannelChunkService.RetrieveReplicas:output_type -> chanchunk.v1.RetrieveReplicasResponse
	6, // 7: chanchunk.v1.ChannelChunkService.DeleteReplicas:output_type -> chanchunk.v1.DeleteReplicasResponse
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_chanchunk_v1_chanchunk_proto_init() }
func file_chanchunk_v1_chanchunk_proto_init() {
	if File_chanchunk_v1_chanchunk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chanchunk_v1_chanchunk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelChunkReplica); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chanchunk_v1_chanchunk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReplicasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chanchunk_v1_chanchunk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReplicasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chanchunk_v1_chanchunk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveReplicasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chanchunk_v1_chanchunk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveReplicasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chanchunk_v1_chanchunk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReplicasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chanchunk_v1_chanchunk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReplicasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chanchunk_v1_chanchunk_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chanchunk_v1_chanchunk_proto_goTypes,
		DependencyIndexes: file_chanchunk_v1_chanchunk_proto_depIdxs,
		MessageInfos:      file_chanchunk_v1_chanchunk_proto_msgTypes,
	}.Build()
	File_chanchunk_v1_chanchunk_proto = out.File
	file_chanchunk_v1_chanchunk_proto_rawDesc = nil
	file_chanchunk_v1_chanchunk_proto_goTypes = nil
	file_chanchunk_v1_chanchunk_proto_depIdxs = nil
}
